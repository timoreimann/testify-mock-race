// Code generated by MockGen. DO NOT EDIT.
// Source: race.go

// Package race is a generated GoMock package.
package race

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDependency is a mock of Dependency interface
type MockDependency struct {
	ctrl     *gomock.Controller
	recorder *MockDependencyMockRecorder
}

// MockDependencyMockRecorder is the mock recorder for MockDependency
type MockDependencyMockRecorder struct {
	mock *MockDependency
}

// NewMockDependency creates a new mock instance
func NewMockDependency(ctrl *gomock.Controller) *MockDependency {
	mock := &MockDependency{ctrl: ctrl}
	mock.recorder = &MockDependencyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDependency) EXPECT() *MockDependencyMockRecorder {
	return m.recorder
}

// End mocks base method
func (m *MockDependency) End(ctx context.Context, tx *Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "End", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// End indicates an expected call of End
func (mr *MockDependencyMockRecorder) End(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "End", reflect.TypeOf((*MockDependency)(nil).End), ctx, tx)
}
